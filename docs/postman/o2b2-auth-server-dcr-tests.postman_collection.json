{
	"info": {
		"_postman_id": "58de581b-78f2-4de5-8a5b-7583b450f8d6",
		"name": "o2b2-auth-server-full",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "785792"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Load jsrassign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('jsrsasign-js', responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "http",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get well-known",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"issuer\", jsonData.issuer);",
									"",
									"//Salva em variáveis os endpoints que serão usados nas requisições seguintes",
									"postman.setEnvironmentVariable(\"registration_endpoint\", jsonData.registration_endpoint);",
									"postman.setEnvironmentVariable(\"token_endpoint\", jsonData.token_endpoint);",
									"postman.setEnvironmentVariable(\"par_endpoint\", jsonData.pushed_authorization_request_endpoint);",
									"postman.setEnvironmentVariable(\"authorization_endpoint\", jsonData.authorization_endpoint);",
									"postman.setEnvironmentVariable(\"issuer\", jsonData.issuer);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{well_known_endpoint}}",
							"host": [
								"{{well_known_endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requisições que irão carregar as informações necessárias para as demais chamadas.\n\n- Load jsrassign - Carrega a biblioteca jsrassign que é utilizada para assinar o client_assertion nos endpoints onde é necessário.\n    \n- Get well-known - Consulta o well-known do AS e salva os endpoints para utilização nas requisições posteriores."
		},
		{
			"name": "DCR",
			"item": [
				{
					"name": "Get Directory Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "directory:software",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{software_statement_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://matls-auth.sandbox.directory.openbankingbrasil.org.br/token",
							"protocol": "https",
							"host": [
								"matls-auth",
								"sandbox",
								"directory",
								"openbankingbrasil",
								"org",
								"br"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Software Statement Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"software_statement_assertion\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://matls-auth.sandbox.directory.openbankingbrasil.org.br/organisations/{{org_id}}/softwarestatements/{{software_statement_id}}/assertion",
							"protocol": "https",
							"host": [
								"matls-auth",
								"sandbox",
								"directory",
								"openbankingbrasil",
								"org",
								"br"
							],
							"path": [
								"organisations",
								"{{org_id}}",
								"softwarestatements",
								"{{software_statement_id}}",
								"assertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "DCR - Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"client_id\", jsonData.client_id);",
									"postman.setEnvironmentVariable(\"registration_access_token\", jsonData.registration_access_token);",
									"postman.setEnvironmentVariable(\"registration_client_uri\", jsonData.registration_client_uri);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"grant_types\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"client_credentials\"\n  ],\n  \"jwks_uri\": \"https://keystore.sandbox.directory.openbankingbrasil.org.br/{{org_id}}/{{software_statement_id}}/application.jwks\",\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"redirect_uris\": [\n    \"https://demo.certification.openid.net/test/a/o2b2/callback\",\n    \"https://demo.certification.openid.net/test/a/o2b2/callback?dummy1=lorem&dummy2=ipsum\"\n  ],\n  \"software_statement\": \"{{software_statement_assertion}}\",\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\": \"A256GCM\",\n  \"tls_client_certificate_bound_access_tokens\": true,\n  \"scope\": \"openid payments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{registration_endpoint}}",
							"host": [
								"{{registration_endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DCR - Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"registration_response_body\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registration_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"grant_types\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"client_credentials\"\n  ],\n  \"jwks_uri\": \"https://keystore.sandbox.directory.openbankingbrasil.org.br/{{org_id}}/{{software_statement_id}}/application.jwks\",\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"redirect_uris\": [\n    \"https://demo.certification.openid.net/test/a/o2b2/callback\",\n    \"https://demo.certification.openid.net/test/a/o2b2/callback?dummy1=lorem&dummy2=ipsum\"\n  ],\n  \"software_statement\": \"{{software_statement_assertion}}\",\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\": \"A256GCM\",\n  \"tls_client_certificate_bound_access_tokens\": true,\n  \"scope\": \"openid payments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{registration_client_uri}}",
							"host": [
								"{{registration_client_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DCR - Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const registrationResponseBody = pm.environment.get(\"registration_response_body\");",
									"let jsonData = JSON.parse(registrationResponseBody);",
									"",
									"delete(jsonData.registration_access_token);",
									"delete(jsonData.registration_client_uri);",
									"delete(jsonData.client_id_issued_at);",
									"",
									"pm.environment.set(\"registration_response_body\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registration_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{registration_response_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{registration_client_uri}}",
							"host": [
								"{{registration_client_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DCR - Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{registration_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"grant_types\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"client_credentials\"\n  ],\n  \"jwks_uri\": \"https://keystore.sandbox.directory.openbankingbrasil.org.br/{{org_id}}/{{software_statement_id}}/application.jwks\",\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"redirect_uris\": [\n    \"https://demo.certification.openid.net/test/a/o2b2/callback\",\n    \"https://demo.certification.openid.net/test/a/o2b2/callback?dummy1=lorem&dummy2=ipsum\"\n  ],\n  \"software_statement\": \"{{software_statement_assertion}}\",\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\": \"A256GCM\",\n  \"tls_client_certificate_bound_access_tokens\": true,\n  \"scope\": \"openid payments\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{registration_client_uri}}",
							"host": [
								"{{registration_client_uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Testing Client",
			"item": [
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Function to create the value for jti parameter",
									"function generateRandomString(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"  let randomString = '';",
									"",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * characters.length);",
									"    randomString += characters.charAt(randomIndex);",
									"  }",
									"",
									"  return randomString;",
									"}",
									"",
									"//Load env vars",
									"const clientId = pm.environment.get(\"client_id\");",
									"const privateKey = pm.environment.get('brcac_private_key');",
									"const kid = pm.environment.get('brcac_kid');",
									"const endpoint = pm.environment.get('token_endpoint');",
									"",
									"//Load jsrsasign",
									"let navigator = {};",
									"let window = {};",
									"eval(pm.environment.get(\"jsrsasign-js\"));",
									"",
									"//Set client assertion payload",
									"const currentTime = Math.floor(Date.now() / 1000)",
									"const header = {\"alg\" : \"PS256\", \"typ\" : \"JWT\", kid};",
									"const clientAssertionPayload =",
									"{",
									"  \"iss\": clientId,",
									"  \"sub\": clientId,",
									"  \"aud\": endpoint,",
									"  \"iat\": currentTime,",
									"  \"exp\": currentTime + 500,",
									"  \"jti\": generateRandomString(10)",
									"}",
									"",
									"//Sign client assertion and set the env var to be used in the request",
									"const jwt = KJUR.jws.JWS.sign(null, header, clientAssertionPayload, privateKey);",
									"pm.environment.set('client_assertion', jwt);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "payments",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{token_endpoint}}",
							"host": [
								"{{token_endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Testa o client criado no DCR criando um access_token"
		},
		{
			"name": "Redirect the user",
			"item": [
				{
					"name": "POST Consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"consent_id\", jsonData.data.consentId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"loggedUser\": {\r\n      \"document\": {\r\n        \"identification\": \"11111111111\",\r\n        \"rel\": \"CPF\"\r\n      }\r\n    },\r\n    \"businessEntity\": {\r\n      \"document\": {\r\n        \"identification\": \"11111111111111\",\r\n        \"rel\": \"CNPJ\"\r\n      }\r\n    },\r\n    \"permissions\": [\r\n      \"ACCOUNTS_READ\",\r\n      \"ACCOUNTS_OVERDRAFT_LIMITS_READ\",\r\n      \"RESOURCES_READ\"\r\n    ],\r\n    \"expirationDateTime\": \"2021-05-21T08:30:00Z\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:4000/open-banking/consents/v3/consents",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"open-banking",
								"consents",
								"v3",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Call PAR endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Function to create the value for jti and state parameters",
									"function generateRandomString(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"  let randomString = '';",
									"",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * characters.length);",
									"    randomString += characters.charAt(randomIndex);",
									"  }",
									"",
									"  return randomString;",
									"}",
									"",
									"const clientId = pm.environment.get(\"client_id\");",
									"const consentId = pm.environment.get(\"consent_id\");",
									"const parEndpoint = pm.environment.get(\"par_endpoint\");",
									"const issuer = pm.environment.get(\"issuer\");",
									"//const redirectUri = pm.environment.get(\"redirect_uri\");",
									"const redirectUri = \"https://demo.certification.openid.net/test/a/o2b2/callback\";",
									"const privateKey = pm.environment.get('brcac_private_key');",
									"",
									"const kid = pm.environment.get('brcac_kid');",
									"",
									"let navigator = {};",
									"let window = {};",
									"eval(pm.environment.get(\"jsrsasign-js\"));",
									"",
									"const currentTime = Math.floor(Date.now() / 1000)",
									"",
									"const header = {\"alg\" : \"PS256\", \"typ\" : \"JWT\", kid};",
									"",
									"const claimSet =",
									"{",
									"  \"iss\": clientId,",
									"  \"sub\": clientId,",
									"  \"aud\": parEndpoint,",
									"  \"iat\": currentTime,",
									"  \"exp\": currentTime + 500,",
									"  \"jti\": generateRandomString(10)",
									"}",
									"",
									"const jwt =  KJUR.jws.JWS.sign(null, header, claimSet, privateKey);",
									"pm.environment.set('client_assertion', jwt);",
									"",
									"const parPayload = {",
									"        \"iss\": clientId,",
									"        \"response_type\": \"code id_token\",",
									"        \"code_challenge_method\": \"S256\",",
									"        \"nonce\": \"S05tH4J105\",",
									"        \"client_id\": clientId,",
									"        aud: issuer,",
									"        nbf: currentTime,",
									"        scope: \"openid payments consent:\"+consentId,",
									"        redirect_uri: redirectUri,",
									"        state: generateRandomString(10),",
									"        exp: currentTime + 500,",
									"        code_challenge: \"s7O3BLoJFer_w_HzH_RpLj-USoWbu_ROqwS0tW2Lmj4\"",
									"}",
									"",
									"const parRequest =  KJUR.jws.JWS.sign(null, header, parPayload, privateKey);",
									"pm.environment.set('par_request_object', parRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"let requestUri = jsonData.request_uri;",
									"const authorizationEndpoint = pm.environment.get(\"authorization_endpoint\");",
									"//const redirectUri = pm.environment.get(\"redirect_uri\");",
									"const redirectUri = \"https://demo.certification.openid.net/test/a/o2b2/callback\";",
									"",
									"let url = `${authorizationEndpoint}?request_uri=${requestUri}&redirect_uri=${redirectUri}&scope=openid%20payments&response_type=code%20id_token`",
									"",
									"console.log(url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "request",
									"value": "{{par_request_object}}",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{par_endpoint}}",
							"host": [
								"{{par_endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Personal Identification",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://mtls-as.localhost/open-banking/customers/v2/personal/identifications",
							"protocol": "https",
							"host": [
								"mtls-as",
								"localhost"
							],
							"path": [
								"open-banking",
								"customers",
								"v2",
								"personal",
								"identifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Consent",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:4000/open-banking/consents/v3/consents/urn:ranibank:fc2bc16e-205e-4e6a-b421-9ca8fb6c7855",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"open-banking",
								"consents",
								"v3",
								"consents",
								"urn:ranibank:fc2bc16e-205e-4e6a-b421-9ca8fb6c7855"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Exchange code by token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Function to create the value for jti parameter",
									"function generateRandomString(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"  let randomString = '';",
									"",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * characters.length);",
									"    randomString += characters.charAt(randomIndex);",
									"  }",
									"",
									"  return randomString;",
									"}",
									"",
									"//Load env vars",
									"const clientId = pm.environment.get(\"client_id\");",
									"const privateKey = pm.environment.get('brcac_private_key');",
									"const kid = pm.environment.get('brcac_kid');",
									"const endpoint = pm.environment.get('token_endpoint');",
									"",
									"//Load jsrsasign",
									"let navigator = {};",
									"let window = {};",
									"eval(pm.environment.get(\"jsrsasign-js\"));",
									"",
									"//Set client assertion payload",
									"const currentTime = Math.floor(Date.now() / 1000)",
									"const header = {\"alg\" : \"PS256\", \"typ\" : \"JWT\", kid};",
									"const clientAssertionPayload =",
									"{",
									"  \"iss\": clientId,",
									"  \"sub\": clientId,",
									"  \"aud\": endpoint,",
									"  \"iat\": currentTime,",
									"  \"exp\": currentTime + 500,",
									"  \"jti\": generateRandomString(10)",
									"}",
									"",
									"//Sign client assertion and set the env var to be used in the request",
									"const jwt = KJUR.jws.JWS.sign(null, header, clientAssertionPayload, privateKey);",
									"pm.environment.set('client_assertion', jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "eg-kZN0J5snhievWE2WbEZYLpDyedDct7XjOr4_pQos",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://demo.certification.openid.net/test/a/o2b2/callback",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "code_verifier",
									"value": "jk24853kjh535308u4h538u53o53805jo3583h59385398453h4583h534853hu853985h39h593",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{token_endpoint}}",
							"host": [
								"{{token_endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Renew access_token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"  let randomString = '';",
									"",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * characters.length);",
									"    randomString += characters.charAt(randomIndex);",
									"  }",
									"",
									"  return randomString;",
									"}",
									"",
									"//Load env vars",
									"const clientId = pm.environment.get(\"client_id\");",
									"const privateKey = pm.environment.get('brcac_private_key');",
									"const kid = pm.environment.get('brcac_kid');",
									"const endpoint = pm.environment.get('token_endpoint');",
									"",
									"//Load jsrsasign",
									"let navigator = {};",
									"let window = {};",
									"eval(pm.environment.get(\"jsrsasign-js\"));",
									"",
									"//Set client assertion payload",
									"const currentTime = Math.floor(Date.now() / 1000)",
									"const header = {\"alg\" : \"PS256\", \"typ\" : \"JWT\", kid};",
									"const clientAssertionPayload =",
									"{",
									"  \"iss\": clientId,",
									"  \"sub\": clientId,",
									"  \"aud\": endpoint,",
									"  \"iat\": currentTime,",
									"  \"exp\": currentTime + 500,",
									"  \"jti\": generateRandomString(10)",
									"}",
									"",
									"//Sign client assertion and set the env var to be used in the request",
									"const jwt = KJUR.jws.JWS.sign(null, header, clientAssertionPayload, privateKey);",
									"pm.environment.set('client_assertion', jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{token_endpoint}}",
							"host": [
								"{{token_endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "Introspection",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://as.localhost:3000/token/introspection",
							"protocol": "https",
							"host": [
								"as",
								"localhost"
							],
							"port": "3000",
							"path": [
								"token",
								"introspection"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Client by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:3000/clients/{{client_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clients",
								"{{client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "_interaction=tvZRNfnaFOEGXLItwCKDJ",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://as.localhost/sessions/ccdS0TF9W6_w8w0_QXy8-",
							"protocol": "https",
							"host": [
								"as",
								"localhost"
							],
							"path": [
								"sessions",
								"ccdS0TF9W6_w8w0_QXy8-"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject Consent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "_interaction=iAppCiXiI5IsQ1he-dKQ8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"error\":\"access_denied\",\n  \"error_description\": \"O cliente rejeitou o consentimento\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://as.localhost/rejectConsent/hDwPkSLEWACWC4ua6JUm-",
							"protocol": "https",
							"host": [
								"as",
								"localhost"
							],
							"path": [
								"rejectConsent",
								"hDwPkSLEWACWC4ua6JUm-"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Consent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "_interaction=iAppCiXiI5IsQ1he-dKQ8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\":\"123456\",\n  \"acr\": \"urn:brasil:openbanking:loa3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://as.localhost/approveConsent/b-rccJJ77zf4tCeNIcJuS",
							"protocol": "https",
							"host": [
								"as",
								"localhost"
							],
							"path": [
								"approveConsent",
								"b-rccJJ77zf4tCeNIcJuS"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "DCR - Import",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"client_id\", jsonData.client_id);",
									"postman.setEnvironmentVariable(\"registration_access_token\", jsonData.registration_access_token);",
									"postman.setEnvironmentVariable(\"registration_client_uri\", jsonData.registration_client_uri);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"myclientid\",\n    \"jwks_uri\": \"https://keystore.sandbox.directory.openbankingbrasil.org.br/{{org_id}}/{{software_statement_id}}/application.jwks\",\n    \"redirect_uris\": [{{redirect_uris}}],\n    \"scope\": \"openid payments\",\n    \"software_statement\": \"{{{software_statement_assertion}}}\",\n    \"registration_client_uri\": \"https://localhost:3000/reg/myclientid\",\n    \"registration_access_token\": \"EfXLuBP0BZaQ81ya-glM3n1EURjeWG8ZUo9y25qYI4w\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/import/client",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"import",
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Refresh Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"client_id\", jsonData.client_id);",
									"postman.setEnvironmentVariable(\"registration_access_token\", jsonData.registration_access_token);",
									"postman.setEnvironmentVariable(\"registration_client_uri\", jsonData.registration_client_uri);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"myclientid\",\n    \"refresh_tokens\": [\n        {\n            \"account_id\": \"admin\",\n            \"scope\": \"openid payments consent:urn:mybank:94da84e3-0872-45dc-95a6-5a2b4fa5f5f7\",\n            \"refresh_token\": \"myImpotedRefreshToken\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:3000/import/refreshTokens",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"import",
								"refreshTokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Refresh Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"  let randomString = '';",
									"",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * characters.length);",
									"    randomString += characters.charAt(randomIndex);",
									"  }",
									"",
									"  return randomString;",
									"}",
									"",
									"//Load env vars",
									"//const clientId = pm.environment.get(\"client_id\");",
									"const clientId = 'ranieridoidao';",
									"const privateKey = pm.environment.get('brcac_private_key');",
									"const kid = pm.environment.get('brcac_kid');",
									"const endpoint = pm.environment.get('token_endpoint');",
									"",
									"//Load jsrsasign",
									"let navigator = {};",
									"let window = {};",
									"eval(pm.environment.get(\"jsrsasign-js\"));",
									"",
									"//Set client assertion payload",
									"const currentTime = Math.floor(Date.now() / 1000)",
									"const header = {\"alg\" : \"PS256\", \"typ\" : \"JWT\", kid};",
									"const clientAssertionPayload =",
									"{",
									"  \"iss\": clientId,",
									"  \"sub\": clientId,",
									"  \"aud\": endpoint,",
									"  \"iat\": currentTime,",
									"  \"exp\": currentTime + 500,",
									"  \"jti\": generateRandomString(10)",
									"}",
									"",
									"//Sign client assertion and set the env var to be used in the request",
									"const jwt = KJUR.jws.JWS.sign(null, header, clientAssertionPayload, privateKey);",
									"pm.environment.set('client_assertion', jwt);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "myImpotedRefreshToken",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{token_endpoint}}",
							"host": [
								"{{token_endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requisições para teste da importação de clients e refresh_tokens"
		}
	],
	"variable": [
		{
			"key": "dayjs_library",
			"value": ""
		},
		{
			"key": "jose_library",
			"value": ""
		}
	]
}